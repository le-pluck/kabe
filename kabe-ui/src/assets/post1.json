{
  "delta": {
    "ops": [
      {
        "insert": "计算属性 "
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/essentials/computed.html#computed-properties"
        },
        "insert": "​"
      },
      {
        "attributes": {
          "header": 1
        },
        "insert": "\n"
      },
      {
        "insert": "基础示例 "
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/essentials/computed.html#basic-example"
        },
        "insert": "​"
      },
      {
        "attributes": {
          "header": 2
        },
        "insert": "\n"
      },
      {
        "insert": "模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象：\n\njs\nconst author = reactive({"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  name: 'John Doe',"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  books: ["
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    'Vue 2 - Advanced Guide',"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    'Vue 3 - Basic Guide',"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    'Vue 4 - The Mystery'"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  ]"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "})"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "我们想根据 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "author"
      },
      {
        "insert": " 是否已有一些书籍来展示不同的信息：\ntemplate\n<p>Has published books:</p>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "<span>{{ author.books.length > 0 ? 'Yes' : 'No' }}</span>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "这里的模板看起来有些复杂。我们必须认真看好一会儿才能明白它的计算依赖于 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "author.books"
      },
      {
        "insert": "。更重要的是，如果在模板中需要不止一次这样的计算，我们可不想将这样的代码在模板里重复好多遍。\n因此我们推荐使用"
      },
      {
        "attributes": {
          "bold": true
        },
        "insert": "计算属性"
      },
      {
        "insert": "来描述依赖响应式状态的复杂逻辑。这是重构后的示例：\n\nvue\n<script setup>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "import { reactive, computed } from 'vue'"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n\n"
      },
      {
        "insert": "const author = reactive({"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  name: 'John Doe',"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  books: ["
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    'Vue 2 - Advanced Guide',"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    'Vue 3 - Basic Guide',"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    'Vue 4 - The Mystery'"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  ]"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "})"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n\n"
      },
      {
        "insert": "// 一个计算属性 ref"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "const publishedBooksMessage = computed(() => {"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  return author.books.length > 0 ? 'Yes' : 'No'"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "})"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "</script>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n\n"
      },
      {
        "insert": "<template>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  <p>Has published books:</p>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  <span>{{ publishedBooksMessage }}</span>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "</template>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "attributes": {
          "link": "https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlYWN0aXZlLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuY29uc3QgYXV0aG9yID0gcmVhY3RpdmUoe1xuICBuYW1lOiAnSm9obiBEb2UnLFxuICBib29rczogW1xuICAgICdWdWUgMiAtIEFkdmFuY2VkIEd1aWRlJyxcbiAgICAnVnVlIDMgLSBCYXNpYyBHdWlkZScsXG4gICAgJ1Z1ZSA0IC0gVGhlIE15c3RlcnknXG4gIF1cbn0pXG5cbi8vIGEgY29tcHV0ZWQgcmVmXG5jb25zdCBwdWJsaXNoZWRCb29rc01lc3NhZ2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gIHJldHVybiBhdXRob3IuYm9va3MubGVuZ3RoID4gMCA/ICdZZXMnIDogJ05vJ1xufSlcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxwPkhhcyBwdWJsaXNoZWQgYm9va3M6PC9wPlxuICA8c3Bhbj57eyBwdWJsaXNoZWRCb29rc01lc3NhZ2UgfX08L3NwYW4+XG48L3RlbXBsYXRlPiIsImltcG9ydC1tYXAuanNvbiI6IntcbiAgXCJpbXBvcnRzXCI6IHtcbiAgICBcInZ1ZVwiOiBcImh0dHBzOi8vc2ZjLnZ1ZWpzLm9yZy92dWUucnVudGltZS5lc20tYnJvd3Nlci5qc1wiXG4gIH1cbn0ifQ=="
        },
        "insert": "在演练场中尝试一下"
      },
      {
        "insert": "\n我们在这里定义了一个计算属性 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "publishedBooksMessage"
      },
      {
        "insert": "。"
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "computed()"
      },
      {
        "insert": " 方法期望接收一个 getter 函数，返回值为一个"
      },
      {
        "attributes": {
          "bold": true
        },
        "insert": "计算属性 ref"
      },
      {
        "insert": "。和其他一般的 ref 类似，你可以通过 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "publishedBooksMessage.value"
      },
      {
        "insert": " 访问计算结果。计算属性 ref 也会在模板中自动解包，因此在模板表达式中引用时无需添加 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": ".value"
      },
      {
        "insert": "。\nVue 的计算属性会自动追踪响应式依赖。它会检测到 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "publishedBooksMessage"
      },
      {
        "insert": " 依赖于 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "author.books"
      },
      {
        "insert": "，所以当 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "author.books"
      },
      {
        "insert": " 改变时，任何依赖于 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "publishedBooksMessage"
      },
      {
        "insert": " 的绑定都会同时更新。\n也可参考："
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/typescript/composition-api.html#typing-computed"
        },
        "insert": "为计算属性标注类型"
      },
      {
        "insert": " \n计算属性缓存 vs 方法 "
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/essentials/computed.html#computed-caching-vs-methods"
        },
        "insert": "​"
      },
      {
        "attributes": {
          "header": 2
        },
        "insert": "\n"
      },
      {
        "insert": "你可能注意到我们在表达式中像这样调用一个函数也会获得和计算属性相同的结果：\ntemplate\n<p>{{ calculateBooksMessage() }}</p>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "\njs\n// 组件中"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "function calculateBooksMessage() {"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  return author.books.length > 0 ? 'Yes' : 'No'"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "}"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于"
      },
      {
        "attributes": {
          "bold": true
        },
        "insert": "计算属性值会基于其响应式依赖被缓存"
      },
      {
        "insert": "。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "author.books"
      },
      {
        "insert": " 不改变，无论多少次访问 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "publishedBooksMessage"
      },
      {
        "insert": " 都会立即返回先前的计算结果，而不用重复执行 getter 函数。\n这也解释了为什么下面的计算属性永远不会更新，因为 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "Date.now()"
      },
      {
        "insert": " 并不是一个响应式依赖：\n\njs\nconst now = computed(() => Date.now())"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "相比之下，方法调用"
      },
      {
        "attributes": {
          "bold": true
        },
        "insert": "总是"
      },
      {
        "insert": "会在重渲染发生时再次执行函数。\n为什么需要缓存呢？想象一下我们有一个非常耗性能的计算属性 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "list"
      },
      {
        "insert": "，需要循环一个巨大的数组并做许多计算逻辑，并且可能也有其他计算属性依赖于 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "list"
      },
      {
        "insert": "。没有缓存的话，我们会重复执行非常多次 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "list"
      },
      {
        "insert": " 的 getter，然而这实际上没有必要！如果你确定不需要缓存，那么也可以使用方法调用。\n可写计算属性 "
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/essentials/computed.html#writable-computed"
        },
        "insert": "​"
      },
      {
        "attributes": {
          "header": 2
        },
        "insert": "\n"
      },
      {
        "insert": "计算属性默认是只读的。当你尝试修改一个计算属性时，你会收到一个运行时警告。只在某些特殊场景中你可能才需要用到“可写”的属性，你可以通过同时提供 getter 和 setter 来创建：\n\nvue\n<script setup>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "import { ref, computed } from 'vue'"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n\n"
      },
      {
        "insert": "const firstName = ref('John')"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "const lastName = ref('Doe')"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n\n"
      },
      {
        "insert": "const fullName = computed({"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  // getter"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  get() {"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    return firstName.value + ' ' + lastName.value"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  },"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  // setter"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  set(newValue) {"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    // 注意：我们这里使用的是解构赋值语法"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "    [firstName.value, lastName.value] = newValue.split(' ')"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "  }"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "})"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "</script>"
      },
      {
        "attributes": {
          "code-block": true
        },
        "insert": "\n"
      },
      {
        "insert": "现在当你再运行 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "fullName.value = 'John Doe'"
      },
      {
        "insert": " 时，setter 会被调用而 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "firstName"
      },
      {
        "insert": " 和 "
      },
      {
        "attributes": {
          "code": true
        },
        "insert": "lastName"
      },
      {
        "insert": " 会随之更新。\n最佳实践 "
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/essentials/computed.html#best-practices"
        },
        "insert": "​"
      },
      {
        "attributes": {
          "header": 2
        },
        "insert": "\n"
      },
      {
        "insert": "Getter 不应有副作用 "
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free"
        },
        "insert": "​"
      },
      {
        "attributes": {
          "header": 3
        },
        "insert": "\n"
      },
      {
        "insert": "计算属性的 getter 应只做计算而没有任何其他的副作用，这一点非常重要，请务必牢记。举例来说，"
      },
      {
        "attributes": {
          "bold": true
        },
        "insert": "不要在 getter 中做异步请求或者更改 DOM"
      },
      {
        "insert": "！一个计算属性的声明中描述的是如何根据其他值派生一个值。因此 getter 的职责应该仅为计算和返回该值。在之后的指引中我们会讨论如何使用"
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/essentials/watchers.html"
        },
        "insert": "监听器"
      },
      {
        "insert": "根据其他响应式状态的变更来创建副作用。\n避免直接修改计算属性值 "
      },
      {
        "attributes": {
          "link": "https://cn.vuejs.org/guide/essentials/computed.html#avoid-mutating-computed-value"
        },
        "insert": "​"
      },
      {
        "attributes": {
          "header": 3
        },
        "insert": "\n"
      },
      {
        "insert": "从计算属性返回的值是派生状态。可以把它看作是一个“临时快照”，每当源状态发生变化时，就会创建一个新的快照。更改快照是没有意义的，因此计算属性的返回值应该被视为只读的，并且永远不应该被更改——应该更新它所依赖的源状态以触发新的计算。\n"
      }
    ]
  },
  "html": "<h1>计算属性 <a href=\"https://cn.vuejs.org/guide/essentials/computed.html#computed-properties\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h1><h2>基础示例 <a href=\"https://cn.vuejs.org/guide/essentials/computed.html#basic-example\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象：</p><p><br></p><p>js</p><pre class=\"ql-syntax\" spellcheck=\"false\">const author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n</pre><p>我们想根据 <code>author</code> 是否已有一些书籍来展示不同的信息：</p><p>template</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;p&gt;Has published books:&lt;/p&gt;\n&lt;span&gt;{{ author.books.length &gt; 0 ? 'Yes' : 'No' }}&lt;/span&gt;\n</pre><p>这里的模板看起来有些复杂。我们必须认真看好一会儿才能明白它的计算依赖于 <code>author.books</code>。更重要的是，如果在模板中需要不止一次这样的计算，我们可不想将这样的代码在模板里重复好多遍。</p><p>因此我们推荐使用<strong>计算属性</strong>来描述依赖响应式状态的复杂逻辑。这是重构后的示例：</p><p><br></p><p>vue</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;script setup&gt;\nimport { reactive, computed } from 'vue'\n\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n\n// 一个计算属性 ref\nconst publishedBooksMessage = computed(() =&gt; {\n  return author.books.length &gt; 0 ? 'Yes' : 'No'\n})\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;p&gt;Has published books:&lt;/p&gt;\n  &lt;span&gt;{{ publishedBooksMessage }}&lt;/span&gt;\n&lt;/template&gt;\n</pre><p><a href=\"https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlYWN0aXZlLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuY29uc3QgYXV0aG9yID0gcmVhY3RpdmUoe1xuICBuYW1lOiAnSm9obiBEb2UnLFxuICBib29rczogW1xuICAgICdWdWUgMiAtIEFkdmFuY2VkIEd1aWRlJyxcbiAgICAnVnVlIDMgLSBCYXNpYyBHdWlkZScsXG4gICAgJ1Z1ZSA0IC0gVGhlIE15c3RlcnknXG4gIF1cbn0pXG5cbi8vIGEgY29tcHV0ZWQgcmVmXG5jb25zdCBwdWJsaXNoZWRCb29rc01lc3NhZ2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gIHJldHVybiBhdXRob3IuYm9va3MubGVuZ3RoID4gMCA/ICdZZXMnIDogJ05vJ1xufSlcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxwPkhhcyBwdWJsaXNoZWQgYm9va3M6PC9wPlxuICA8c3Bhbj57eyBwdWJsaXNoZWRCb29rc01lc3NhZ2UgfX08L3NwYW4+XG48L3RlbXBsYXRlPiIsImltcG9ydC1tYXAuanNvbiI6IntcbiAgXCJpbXBvcnRzXCI6IHtcbiAgICBcInZ1ZVwiOiBcImh0dHBzOi8vc2ZjLnZ1ZWpzLm9yZy92dWUucnVudGltZS5lc20tYnJvd3Nlci5qc1wiXG4gIH1cbn0ifQ==\" rel=\"noopener noreferrer\" target=\"_blank\">在演练场中尝试一下</a></p><p>我们在这里定义了一个计算属性 <code>publishedBooksMessage</code>。<code>computed()</code> 方法期望接收一个 getter 函数，返回值为一个<strong>计算属性 ref</strong>。和其他一般的 ref 类似，你可以通过 <code>publishedBooksMessage.value</code> 访问计算结果。计算属性 ref 也会在模板中自动解包，因此在模板表达式中引用时无需添加 <code>.value</code>。</p><p>Vue 的计算属性会自动追踪响应式依赖。它会检测到 <code>publishedBooksMessage</code> 依赖于 <code>author.books</code>，所以当 <code>author.books</code> 改变时，任何依赖于 <code>publishedBooksMessage</code> 的绑定都会同时更新。</p><p>也可参考：<a href=\"https://cn.vuejs.org/guide/typescript/composition-api.html#typing-computed\" rel=\"noopener noreferrer\" target=\"_blank\">为计算属性标注类型</a> </p><h2>计算属性缓存 vs 方法 <a href=\"https://cn.vuejs.org/guide/essentials/computed.html#computed-caching-vs-methods\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>你可能注意到我们在表达式中像这样调用一个函数也会获得和计算属性相同的结果：</p><p>template</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;p&gt;{{ calculateBooksMessage() }}&lt;/p&gt;\n</pre><p><br></p><p>js</p><pre class=\"ql-syntax\" spellcheck=\"false\">// 组件中\nfunction calculateBooksMessage() {\n  return author.books.length &gt; 0 ? 'Yes' : 'No'\n}\n</pre><p>若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于<strong>计算属性值会基于其响应式依赖被缓存</strong>。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 <code>author.books</code> 不改变，无论多少次访问 <code>publishedBooksMessage</code> 都会立即返回先前的计算结果，而不用重复执行 getter 函数。</p><p>这也解释了为什么下面的计算属性永远不会更新，因为 <code>Date.now()</code> 并不是一个响应式依赖：</p><p><br></p><p>js</p><pre class=\"ql-syntax\" spellcheck=\"false\">const now = computed(() =&gt; Date.now())\n</pre><p>相比之下，方法调用<strong>总是</strong>会在重渲染发生时再次执行函数。</p><p>为什么需要缓存呢？想象一下我们有一个非常耗性能的计算属性 <code>list</code>，需要循环一个巨大的数组并做许多计算逻辑，并且可能也有其他计算属性依赖于 <code>list</code>。没有缓存的话，我们会重复执行非常多次 <code>list</code> 的 getter，然而这实际上没有必要！如果你确定不需要缓存，那么也可以使用方法调用。</p><h2>可写计算属性 <a href=\"https://cn.vuejs.org/guide/essentials/computed.html#writable-computed\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>计算属性默认是只读的。当你尝试修改一个计算属性时，你会收到一个运行时警告。只在某些特殊场景中你可能才需要用到“可写”的属性，你可以通过同时提供 getter 和 setter 来创建：</p><p><br></p><p>vue</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;script setup&gt;\nimport { ref, computed } from 'vue'\n\nconst firstName = ref('John')\nconst lastName = ref('Doe')\n\nconst fullName = computed({\n  // getter\n  get() {\n    return firstName.value + ' ' + lastName.value\n  },\n  // setter\n  set(newValue) {\n    // 注意：我们这里使用的是解构赋值语法\n    [firstName.value, lastName.value] = newValue.split(' ')\n  }\n})\n&lt;/script&gt;\n</pre><p>现在当你再运行 <code>fullName.value = 'John Doe'</code> 时，setter 会被调用而 <code>firstName</code> 和 <code>lastName</code> 会随之更新。</p><h2>最佳实践 <a href=\"https://cn.vuejs.org/guide/essentials/computed.html#best-practices\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><h3>Getter 不应有副作用 <a href=\"https://cn.vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>计算属性的 getter 应只做计算而没有任何其他的副作用，这一点非常重要，请务必牢记。举例来说，<strong>不要在 getter 中做异步请求或者更改 DOM</strong>！一个计算属性的声明中描述的是如何根据其他值派生一个值。因此 getter 的职责应该仅为计算和返回该值。在之后的指引中我们会讨论如何使用<a href=\"https://cn.vuejs.org/guide/essentials/watchers.html\" rel=\"noopener noreferrer\" target=\"_blank\">监听器</a>根据其他响应式状态的变更来创建副作用。</p><h3>避免直接修改计算属性值 <a href=\"https://cn.vuejs.org/guide/essentials/computed.html#avoid-mutating-computed-value\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>从计算属性返回的值是派生状态。可以把它看作是一个“临时快照”，每当源状态发生变化时，就会创建一个新的快照。更改快照是没有意义的，因此计算属性的返回值应该被视为只读的，并且永远不应该被更改——应该更新它所依赖的源状态以触发新的计算。1</p>"
}